# 1. Введение оснований и чисел
import numpy
print('Основания нужно вводить в порядке возрастания: сначала информационные, затем контрольные. Они должны быть взаимно простыми')
osn_inform_kolvo = int(input('Введите количество информационных оснований '))
osn_kontrol_kolvo = int(input('Введение количество контрольных оснований '))
osn_inform = numpy.zeros((osn_inform_kolvo), dtype=int)
osn_kontrol = numpy.zeros((osn_kontrol_kolvo), dtype=int)
osn_kolvo = osn_inform_kolvo + osn_kontrol_kolvo
chisl = numpy.zeros((osn_kolvo), dtype=int)
for i in range(osn_inform_kolvo):
    osn_inform[i] = int(input(f'Введите {i+1} информационное основание '))
for i in range(osn_kontrol_kolvo):
    osn_kontrol[i] = int(input(f'Введите {i+1} контрольное основание '))
for i in range(osn_kolvo):
    chisl[i] = int(input(f'Введите {i+1} число '))
print('Введенные информационные основания = ', osn_inform)
print('Введенные контрольные основания = ', osn_kontrol)
osn = numpy.concatenate((osn_inform, osn_kontrol))
print('Информационные и контрольные основания = ', osn)
print('Введенное число = ', chisl) 
print('Поиск рабочего R и полного P диапазонов: ')
work_diapazon = numpy.prod(osn_inform) 
print('Рабочий диапазон R (произведение информационных оснований) = ', work_diapazon)
full_diapazon = numpy.prod(osn)
print('Полный диапазон P (произведение всех оснований) = ', full_diapazon)
#4. Метод совместного использования КТО (китайской теоремы об остатках) и ОПСС
#4.1 Поиск величины P/pi = Pi для каждого основания
print('1. Поиск величины P/pi = Pi для каждого сонования, где P - полный диапазон, pi - i-ое основание:') 
P = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    P[i] = full_diapazon/osn[i]
print('Величина P = ', P)
#4.2 Поиск величины βi = Pi(modpi)
print('2. Поиск величины βi = Pi(modpi):')
beta = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    beta[i] = numpy.mod(P[i], osn[i])
print('Величина β =', beta)
#4.3 Нахождение веса mi базисов, m принадлежит Z, m1 * βi = 1(modpi)
print('3. Нахождение весов mi базисов, m принадлежит Z, m1 * βi = 1(modpi):')
m = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    m[i] = pow(int(beta[i]), int(-1), int(osn[i]))
print('Веса базисов m = ', m)
#4.4 Вычисление ортогональных базисов системы
print('4. Вычисление ортогональных базисов системы B, равное произведению веса базиса mi на величину Pi')
B = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    B[i] = m[i]*P[i]
print('Ортогональные базисы системы B = ', B)
#4.5 Перевод ортогональных базисов системы в модулярную систему счисления (СОК), для дальнейшего перевода в ОПСС
#, получается матрица:
print('5. Перевод ортогональных базисов системы в модулярную систему счисления')
B_modular = numpy.zeros((osn_kolvo, osn_kolvo))
for i in range(osn_kolvo):
    B_modular[i][:] = numpy.mod(B, osn[i])
    print('Ортогональный базис ', int(B[i]), ' в модулярной системе счисления равен ', numpy.mod(B, osn[i]))
print('Матрица ортогональных базисов, переведенных в модулярную систему счисления: ')
print(B_modular)
#4.6 Поиск констант с ij, являющихся мультипликативными обратными величинами
# для pi по модулю pj (c ij * pi = 1(mod pj))
print('6. Перевод каждого ортогонального базиса, представленного в СОК, в ОПСС. Для этого осуществляется поиск констант c ij, являющихся мультипликативными обратными величинами для pi по модулю pj (c ij * pi = 1(mod pj))')  
c_kolvo = 0
c = numpy.zeros((osn_kolvo-1, osn_kolvo))
for i in range(int(osn_kolvo-1)):
    for j in range(int(osn_kolvo-1)):
        try:
            c[j][i] = pow(int(osn[i]), int(-1), int(osn[j+1]))
            print('c[', j, '][', i, '] = ', c[j][i])
        except ValueError:
            continue
print(c[:,:osn_kolvo-1])
#4.7 Обнуление лишних констант в матрице констант c ij
print('7. Обнуление лишних констант в матрице констант с ij')
for i in range(int(osn_kolvo-2)):
    c[i][i+1:] = 0
print(c[:,:osn_kolvo-1])
#4.8 Разложение ортогональных базисов в ОПСС
print('8. Разложение ортогональных базисов в ОПСС')
B_opss = numpy.zeros((osn_kolvo, osn_kolvo))
for k in range(osn_kolvo):
    B_opss[k][0] = numpy.mod(B_modular[k][0], osn[0])
    print('B_opss[', k, '][0] = ', B_modular[k][0], '(mod', osn[0], ')', '=', B_opss[k][0])
    B_opss[k][1] = numpy.mod(((B_modular[k][1] - B_opss[k][0])*(c[0][0])), osn[1])
    print('B_opss[', k, '][1] = ', ((B_modular[k][1] - B_opss[k][0])*(c[0][0])), '(mod', osn[1], ')')    
    for i in range(2, int(osn_kolvo)):
        B_opss[k][i] = (B_modular[k][i] - B_opss[k][0])*c[i-1][0]
        print('B_opss[', k, '][', i, '] = (', B_modular[k][i], '-', B_opss[k][0], ')*', c[i-1][0], '=', B_opss[k][i])
    for i in range(2, int(osn_kolvo)):
        for j in range(2, int(osn_kolvo)):
            print('k = ', k, 'i = ', i, 'j = ', j)
            if(c[i-1][j] == 0):
                print('B_opss[', k, '][', i, '] = (', B_opss[k][i], '-', B_opss[k][i-1], ')*', c[i-1][j-1], '(mod', osn[i], ') =', numpy.mod(((B_opss[k][i] - B_opss[k][i-1])*(c[i-1][j-1])), osn[i]))
                B_opss[k][i] = numpy.mod(((B_opss[k][i] - B_opss[k][i-1])*(c[i-1][j-1])), osn[i])
                print('B_opss[', k, '][', i, '] = ', B_opss[k][i])
                break
            elif(c[i-1][j] != 0):
                print('B_opss[', k, '][', i, '] = (', B_opss[k][i], '-', B_opss[k][j-1], ')*', c[i-1][j-1], '=', (B_opss[k][i] - B_opss[k][j-1])*c[i-1][j-1])
                B_opss[k][i] = (B_opss[k][i] - B_opss[k][j-1])*c[i-1][j-1]
                print('B_opss[', k, '][', i, '] = ', B_opss[k][i])
print('Матрица разложения ортогональных базисов в ОПСС: ')
print(B_opss)
#4.9 Расчет числа в ОПСС
print('9. Начало расчета числа в ОПСС. Перемножим каждую строку матрицы разложения ортогональных базисов в ОПСС на соответствующее ей введенное число:')
B_opss_chisl = numpy.zeros((osn_kolvo, osn_kolvo))
for i in range(osn_kolvo):
    for j in range(osn_kolvo):
        B_opss_chisl[i][j] = chisl[i]*B_opss[i][j]
print(B_opss_chisl)
opss = numpy.zeros(osn_kolvo)
for j in range(osn_kolvo):
    for i in range(osn_kolvo):
        opss[j] = opss[j] + B_opss_chisl[i][j]
print('Сложим числа в каждом столбце: ')
print(opss)
print('Найдем перенос для каждого столбца: ')
perenos = 0
opss_total = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    opss_total[i] = ((opss[i]+perenos)%osn[i])
    print('opss[', i, '] = ((', opss[i], '+', perenos, ')%', osn[i], ') = ', opss_total[i])
    perenos = opss[i]//osn[i]
    print('perenos = ', opss_total[i], '//', osn[i], '=', perenos)
print('Число в ОПСС равно = ', opss_total)
#4.10 Проверка числа
print('10. Проверка введенного числа на правильность')
check = 0
for i in range(osn_inform_kolvo, osn_kolvo):
    if(opss_total[i] != 0):
        print(chisl, ' - представление числа, содержащее ошибку (ошибки), т.к. хотя бы одно число в ОПСС по контрольному основанию не равно нулю')
        break;
    elif(opss_total[i] == 0):
        check = check + 1
    if(check == osn_kontrol_kolvo):
        print(chisl, ' - число не содержит ошибок, т.к. все числа в ОПСС по контрольным основаниям равны нулю')
#4.11 Дополнительная проверка (переведем число в позиционную систему счисления методом ортогональных базисов
#а также переводом в позиционную систему из ОПСС, и сравним их)
print('11. Дополнительная проверка (переведем число в позиционную систему счисления методом ортогональных базисов, а также переводом в позиционную систему из ОПСС, и сравним их)')
print('Вычисление ортогональных базисов на основе китайской теоремы об остатках (для проверки на наличие ошибок в числе):')
#4.11.1 Поиск величины P/pi = Pi для каждого основания
print('11.1 Поиск величины P/pi = Pi для каждого сонования, где P - полный диапазон, pi - i-ое основание:') 
P = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    P[i] = full_diapazon/osn[i]
print('Величина P = ', P)
#4.11.2 Поиск величины βi = Pi(modpi)
print('11.2 Поиск величины βi = Pi(modpi):')
beta = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    beta[i] = numpy.mod(P[i], osn[i])
print('Величина β =', beta)
#4.11.3 Нахождение веса mi базисов, m принадлежит Z, m1 * βi = 1(modpi)
print('11.3 Нахождение весов mi базисов, m принадлежит Z, m1 * βi = 1(modpi):')
m = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    m[i] = pow(int(beta[i]), int(-1), int(osn[i]))
print('Веса базисов m = ', m)
#4.11.4 Вычисление ортогональных базисов системы
print('11.4 Вычисление ортогональных базисов системы B, равное произведению веса базиса mi на величину Pi')
B = numpy.zeros(osn_kolvo)
for i in range(osn_kolvo):
    B[i] = m[i]*P[i]
print('Ортогональные базисы системы B = ', B)
#4.11.5 Нахождение числа в ПСС
print('11.5 Нахождение числа A в позиционной системе счисления (десятичной), с помощью суммирования всех произведений введенного числа i на ортогональный базис Bi, и затем mod полный диапазон')
A = 0
for i in range(osn_kolvo):
    if(i==0):
        print('A[', i, '] = 0 + ', int(chisl[i]), '*', int(B[i]), '=', int(chisl[i]*B[i]))
    elif(i>0):
        print('A[', i, '] = ', int(A), '+', int(chisl[i]), '*', int(B[i]), '=', int(A+chisl[i]*B[i]))
    A = int(A + chisl[i]*B[i])
print('A = ', A, 'mod(', full_diapazon, ')')
A = numpy.mod(A, full_diapazon)
print('Число А (переведенное с помощью метода ортогональных базисов = ', int(A))
#4.11.6 Проверка числа, переведенного в ОПСС, на правильность, переводом в позиционную систему
opss_check = 0
for i in range(osn_kolvo):
    print(opss_check, '+', opss_total[i], '*', numpy.prod(osn[0:i]), '=', opss_check + opss_total[i]*numpy.prod(osn[0:i]))
    opss_check = opss_check + opss_total[i]*numpy.prod(osn[0:i])
print('Число А (переведенное в позиционную систему счисления из СОК = ', opss_check)
if(int(opss_check) == int(A)):
    print(int(opss_check), '=', int(A))
    print('Число в ОПСС переведено правильно')
else:
    print(int(opss_check), '!=', int(A))
    print('Число в ОПСС переведено неправильно, есть ошибка')
